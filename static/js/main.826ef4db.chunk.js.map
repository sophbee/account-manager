{"version":3,"sources":["components/PayeeCard/PayeeCard.js","components/PayorCard/PayorCard.js","components/Header/Header.js","App.js","serviceWorker.js","index.js","images/paymerang.png"],"names":["PayeeCard","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","open","react_default","a","createElement","Panel","id","defaultExpanded","Heading","Title","toggle","company","Collapse","Body","Row","Col","md","address1","address2","city","postal","country","phone","fax","attn","submissionDate","PAN","CVV","EXP","Component","PayorCard","Table","striped","bordered","condensed","hover","name","payorId","invoice","description","amount","Header","Navbar","Brand","style","backgroundColor","src","image","alt","height","weight","App","className","components_Header_Header","Grid","data","map","payeeInfo","index","components_PayeeCard_PayeeCard","Payee","Name","Address","Address1","Address2","City","StateOrProvince","PostalCode","Country","Phone","Fax","Attention","SubmissionDate","Payment","Exp","Remittance","remits","components_PayorCard_PayorCard","key","PayorId","PayorName","InvoiceNo","Description","Amount","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.826ef4db.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Panel, Button, Row, Col } from 'react-bootstrap';\n\nclass PayeeCard extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // controls the toggle function for each payee card\n    this.state = {\n      open: true,\n    };\n  }\n\n  // creating component/template for the payee card and passing down props from the parent component\n  render() {\n    return (\n      <div>\n        <Panel id=\"collapsible-panel\" defaultExpanded>\n          <Panel.Heading>\n            <Panel.Title toggle>\n              <h3>{this.props.company + ':'}</h3>\n            </Panel.Title>\n          </Panel.Heading>\n          <Panel.Collapse>\n            <Panel.Body>\n              <Row>\n                <Col md={6}>\n                  <h4>{'Company Info'}</h4>\n                  <p>{'Address: ' + this.props.address1 + \" \" + this.props.address2}</p>\n                  <p>{this.props.city + \", \" + this.props.state + \" \" + this.props.postal + \" \" + this.props.country}</p>\n                  <p>{'Phone: ' + this.props.phone}</p>\n                  <p>{'Fax: ' + this.props.fax}</p>\n                  <p>{'Attn: ' + this.props.attn}</p>\n                  <p>{'Last Submission Date: ' + this.props.submissionDate}</p>\n                </Col>\n                <Col md={6}>\n                  <h4>{'Payment Info'}</h4>\n                  <p>{'PAN: ' + this.props.PAN}</p>\n                  <p>{'CVV: ' + this.props.CVV}</p>\n                  <p>{'Exp: ' + this.props.EXP}</p>\n                </Col>\n              </Row>\n            </Panel.Body>\n          </Panel.Collapse>\n        </Panel>\n      </div>\n    )\n  }\n}\n\nexport default PayeeCard;","import React, { Component } from 'react';\nimport { Table, Panel } from 'react-bootstrap';\n\nclass PayorCard extends Component {\n\n  // building out the remittance information into a table template and passing props down from the parent\n  render() {\n    return (\n      <div>\n        <Table striped bordered condensed hover>\n          <thead>\n            <tr>\n              <th>Payor Name</th>\n              <th>PayorID</th>\n              <th>InvoiceNo</th>\n              <th>Description</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{this.props.name}</td>\n              <td>{this.props.payorId}</td>\n              <td>{this.props.invoice}</td>\n              <td>{this.props.description}</td>\n              <td>{this.props.amount}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default PayorCard;","import React, { Component } from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport image from '../../images/paymerang.png';\n\nclass Header extends Component {\n\nrender () {\n    return (\n      <Navbar>\n        <Navbar.Header>\n          <Navbar.Brand style={{ backgroundColor: \"#f4f7f8\" }}>\n            <img src={image} alt=\"Paymerang\" style={{ height: 100, weight: 100 }} />\n          </Navbar.Brand>\n        </Navbar.Header>\n      </Navbar>\n    );\n  }\n}\nexport default Header;","import React, { Component } from 'react';\nimport PayeeCard from './components/PayeeCard/PayeeCard';\nimport PayorCard from './components/PayorCard/PayorCard';\nimport Header from './components/Header/Header';\nimport { Grid, Row, Panel } from 'react-bootstrap';\nimport data from './data.json';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // need the state to control the toggle function for the react bootstrap panels\n    this.state = {\n      open: true,\n    };\n  }\n\n  // dropped in components: header, payee card, and payor card. payee card is grabbing necessary data from the json file to build panels for the payee information via map.\n  // mapping through the payeeInfo array to grab the remittance information for each company and dropping into the table template from payorCard component. \n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Grid>\n          {data.map((payeeInfo, index) => (\n            <Row className='show-grid'>\n              <Panel>\n                <Panel.Body>\n                  <PayeeCard\n                    company = {payeeInfo.Payee.Name}\n                    address1 = {payeeInfo.Payee.Address.Address1}\n                    address2 = {payeeInfo.Payee.Address.Address2}\n                    city = {payeeInfo.Payee.Address.City}\n                    state = {payeeInfo.Payee.Address.StateOrProvince}\n                    postal = {payeeInfo.Payee.Address.PostalCode}\n                    country = {payeeInfo.Payee.Address.Country}\n                    phone = {payeeInfo.Payee.Phone}\n                    fax = {payeeInfo.Payee.Fax}\n                    attn = {payeeInfo.Payee.Attention}\n                    submissionDate = {payeeInfo.Payee.SubmissionDate}\n                    PAN = {payeeInfo.Payment.PAN}\n                    CVV = {payeeInfo.Payment.CVV}\n                    EXP = {payeeInfo.Payment.Exp}\n                  />\n                  <Panel id='collapsible-panel'>\n                    <Panel.Heading>\n                      <Panel.Title toggle>\n                        <h3>Remittance</h3>\n                      </Panel.Title>\n                    </Panel.Heading>\n                    <Panel.Collapse>\n                      <Panel.Body>\n                        {payeeInfo.Remittance.map((remits) => (\n                          <PayorCard\n                            key = {remits.PayorId}\n                            name = {remits.PayorName}\n                            payorId = {remits.PayorId}\n                            invoice = {remits.InvoiceNo}\n                            description = {remits.Description}\n                            amount = {remits.Amount}\n                          />\n                        ))}\n                      </Panel.Body>\n                    </Panel.Collapse>\n                  </Panel>\n                </Panel.Body>\n              </Panel>\n            </Row>\n          ))}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/paymerang.aab0c11e.png\";"],"sourceRoot":""}