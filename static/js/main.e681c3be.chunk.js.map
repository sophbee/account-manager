{"version":3,"sources":["components/PayeeCard/PayeeCard.js","components/PayorCard/PayorCard.js","components/SearchBar/SearchBar.js","components/Header/Header.js","App.js","serviceWorker.js","index.js","images/paymerang.png"],"names":["PayeeCard","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","open","react_default","a","createElement","Panel","className","defaultExpanded","Heading","Title","componentClass","toggle","company","Collapse","Body","Row","Col","md","ListGroup","ListGroupItem","header","address1","address2","city","postal","country","phone","fax","attn","submissionDate","PAN","CVV","EXP","Component","PayorCard","Fragment","name","payorId","invoice","description","amount","SearchBar","handleChange","e","setState","payeeName","target","value","handleSubmit","preventDefault","sendSearchTerm","bind","assertThisInitialized","onSubmit","Grid","xs","FormGroup","controlId","FormControl","type","placeholder","onChange","Feedback","Header","Navbar","Brand","style","backgroundColor","src","image","alt","height","weight","App","searchTerm","receiveSearchTerm","searchValue","_this2","filteredData","data","filter","payeeInfo","Payee","Name","toLowerCase","components_Header_Header","components_SearchBar_SearchBar","map","index","key","components_PayeeCard_PayeeCard","Address","Address1","Address2","City","StateOrProvince","PostalCode","Country","Phone","Fax","Attention","SubmissionDate","Payment","Exp","id","Table","striped","bordered","condensed","hover","Remittance","remits","components_PayorCard_PayorCard","PayorId","PayorName","InvoiceNo","Description","Amount","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e681c3be.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Panel, Row, Col, ListGroup, ListGroupItem } from 'react-bootstrap';\n\nclass PayeeCard extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // controls the toggle function for each payee card\n    this.state = {\n      open: true,\n    };\n  }\n\n  // creating component/template for the payee card and passing down props from the parent component\n  render() {\n    return (\n      <div>\n        <Panel className=\"panel-payee\" defaultExpanded>\n          <Panel.Heading>\n            <Panel.Title componentClass=\"h2\" toggle>{this.props.company}</Panel.Title>\n          </Panel.Heading>\n          <Panel.Collapse>\n            <Panel.Body>\n              <Row> \n                <Col md={6}>\n                  <h4>Company Info</h4>\n                  <ListGroup className=\"list-group-company-info\">\n                    <ListGroupItem header=\"Address\"> {this.props.address1 + \" \" + this.props.address2} <br/> {this.props.city + \", \" + this.props.state + \" \" + this.props.postal + \" \" + this.props.country}</ListGroupItem>\n                    <ListGroupItem header=\"Phone\">{this.props.phone}</ListGroupItem>\n                    <ListGroupItem header=\"Fax\">{this.props.fax}</ListGroupItem>\n                    <ListGroupItem header=\"Attn\">{this.props.attn}</ListGroupItem>\n                    <ListGroupItem header=\"Last Submission Date\">{this.props.submissionDate}</ListGroupItem>\n                  </ListGroup>\n                </Col>\n                <Col md={6}>\n                  <h4>Payment Info</h4>\n                  <ListGroup>\n                    <ListGroupItem header=\"PAN\">{this.props.PAN}</ListGroupItem>\n                    <ListGroupItem header=\"CVV\">{this.props.CVV}</ListGroupItem>\n                    <ListGroupItem header=\"Exp\">{this.props.EXP}</ListGroupItem>\n                  </ListGroup>\n                </Col>\n              </Row>\n            </Panel.Body>\n          </Panel.Collapse>\n        </Panel>\n      </div>\n    )\n  }\n}\n\nexport default PayeeCard;","import React, { Component } from 'react';\n\nclass PayorCard extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <tr>\n          <td>{this.props.name}</td>\n          <td>{this.props.payorId}</td>\n          <td>{this.props.invoice}</td>\n          <td>{this.props.description}</td>\n          <td>{this.props.amount}</td>\n        </tr>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PayorCard;","import React, { Component } from 'react';\nimport { FormGroup, FormControl, Grid, Row, Col } from 'react-bootstrap';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    // user input for search term saved as a state\n    this.state = {\n        payeeName: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // handling the state change; capturing user input\n  handleChange = e => {\n      this.setState({\n          payeeName: e.target.value\n      });\n  }\n\n  // handling sending user input to app component\n  handleSubmit = e => {\n      e.preventDefault();\n      this.props.sendSearchTerm(this.state.payeeName);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <Grid>\n            <Row className='show-grid'>\n                <Col className='form-column' xs={12} md={4}>\n                    <FormGroup\n                    controlId=\"formBasicText\"\n                    >\n                    <FormControl\n                        type=\"text\"\n                        value={this.state.payeeName}\n                        placeholder=\"Search Payees\"\n                        onChange={this.handleChange}\n                    />\n                    <FormControl.Feedback />\n                    </FormGroup>\n                </Col>\n            </Row>\n        </Grid>\n      </form>\n    );\n  }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport image from '../../images/paymerang.png';\n\nclass Header extends Component {\nrender () {\n    return (\n      <Navbar>\n        <Navbar.Header>\n          <Navbar.Brand style={{ backgroundColor: \"#f4f7f8\" }}>\n            <img src={image} alt=\"Paymerang\" style={{ height: 100, weight: 100 }} />\n          </Navbar.Brand>\n        </Navbar.Header>\n      </Navbar>\n    );\n  }\n}\nexport default Header;","import React, { Component } from 'react';\nimport PayeeCard from './components/PayeeCard/PayeeCard';\nimport PayorCard from './components/PayorCard/PayorCard';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport Header from './components/Header/Header';\nimport { Grid, Row, Panel, Table } from 'react-bootstrap';\nimport data from './data.json';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    // need the state to control the toggle function for the react bootstrap panels\n    // also storing the user input from the search bar component; passing that up to app.js (parent)\n    this.state = {\n      open: true,\n      searchTerm: ''\n    };\n\n    this.receiveSearchTerm = this.receiveSearchTerm.bind(this);\n  }\n\n  // created function to \"bridge\" information between parent and child\n  receiveSearchTerm(searchValue) {\n    this.setState({\n      searchTerm: searchValue\n    });\n  }\n  \n  // dropped in components: header, payee card, and payor card. payee card is grabbing necessary data from the json file to build panels for the payee information via map.\n  // filtering payee cards for search items: if searched word exists, then shows payee card associated with it; if no search entered, show all payee cards; if user searches for something that isn't available, nothing shows up.\n  // mapping through the payeeInfo array to grab the remittance information for each company and dropping into the table template from payorCard component.\n  render() {\n    const filteredData = this.state.searchTerm === '' ? data : data.filter(payeeInfo => payeeInfo.Payee.Name.toLowerCase() === this.state.searchTerm.toLowerCase());\n    return (\n      <div className=\"App\">\n        <Header />\n        <SearchBar sendSearchTerm={this.receiveSearchTerm} />\n        <Grid>\n          {filteredData.map((payeeInfo, index) => (\n            <Row key={index} className='show-grid'>\n              <Panel>\n                <Panel.Body>\n                  <PayeeCard\n                    company = {payeeInfo.Payee.Name}\n                    address1 = {payeeInfo.Payee.Address.Address1}\n                    address2 = {payeeInfo.Payee.Address.Address2}\n                    city = {payeeInfo.Payee.Address.City}\n                    state = {payeeInfo.Payee.Address.StateOrProvince}\n                    postal = {payeeInfo.Payee.Address.PostalCode}\n                    country = {payeeInfo.Payee.Address.Country}\n                    phone = {payeeInfo.Payee.Phone}\n                    fax = {payeeInfo.Payee.Fax}\n                    attn = {payeeInfo.Payee.Attention}\n                    submissionDate = {payeeInfo.Payee.SubmissionDate}\n                    PAN = {payeeInfo.Payment.PAN}\n                    CVV = {payeeInfo.Payment.CVV}\n                    EXP = {payeeInfo.Payment.Exp}\n                  />\n                  <Panel id='collapsible-panel'>\n                    <Panel.Heading>\n                      <Panel.Title toggle>Remittance</Panel.Title>\n                    </Panel.Heading>\n                    <Panel.Collapse>\n                      <Panel.Body>\n                        {/* instead of looping with the table header every time, just looped the body rows only. pulled that part out of the component. refactor the table header into the component */}\n                        <Table striped bordered condensed hover>\n                          <thead>\n                            <tr>\n                              <th>Payor Name</th>\n                              <th>PayorID</th>\n                              <th>InvoiceNo</th>\n                              <th>Description</th>\n                              <th>Amount</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {payeeInfo.Remittance.map((remits) => (\n                              <PayorCard\n                                key = {remits.PayorId}\n                                name = {remits.PayorName}\n                                payorId = {remits.PayorId}\n                                invoice = {remits.InvoiceNo}\n                                description = {remits.Description}\n                                amount = {remits.Amount}\n                              />\n                            ))}     \n                          </tbody>\n                        </Table>\n                      </Panel.Body>\n                    </Panel.Collapse>\n                  </Panel>\n                </Panel.Body>\n              </Panel>\n            </Row>\n          ))}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/paymerang.aab0c11e.png\";"],"sourceRoot":""}